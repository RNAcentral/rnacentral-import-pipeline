#!/usr/bin/env python

import click
from urlparse import urlparse

import requests


@click.group()
def cli():
    pass


@cli.command('msg')
@click.option('--url', envvar="SLACK_WEBHOOK")
@click.argument('msg', nargs=-1)
def send_msg(msg, url=None):
    """
    This is the entry point that will allow posting of messages to a slack
    channel. This requires either an env var SLACK_API_TOKEN or the --token
    option. The mesage does not need to be quoted (unless to escape special
    characters.
    """
    requests.post(url, json={'text': ' '.join(msg)})


@cli.command('db-work')
@click.option('--db', envvar="PGDATABASE")
@click.option('--url', envvar="SLACK_WEBHOOK")
@click.argument('job_name')
def database_start(job_name, db=None, url=None):
    """
    Warn when an expensive database job started.
    """

    parts = urlparse(db)
    db_name = parts.path[1:]
    msg = 'Running expensive time consuming job on *{name}*'.format(
        name=db_name
    )

    requests.post(url, json={
        'attachments': [{
            'fallback': msg,
            'color': 'warning',
            'title': 'Running job on %s' % db_name,
            'author_name': job_name,
            "text": msg,
        }]
    })


@cli.command('db-done')
@click.option('--db', envvar="PGDATABASE")
@click.option('--url', envvar="SLACK_WEBHOOK")
@click.argument('job_name')
def database_done(job_name, db=None, url=None):
    """
    Message to say an expensive database is done.
    """

    parts = urlparse(db)
    db_name = parts.path[1:]
    msg = 'Running expensive time consuming job on *{name}*'.format(
        name=db_name
    )

    requests.post(url, json={
        'attachments': [{
            'fallback': msg,
            'color': 'good',
            'title': 'Done with job on %s' % db_name,
            'author_name': job_name,
            "text": msg,
        }]
    })


@cli.command('pipeline-done')
@click.option('--success/--failure', default=True)
@click.option('--url', envvar="SLACK_WEBHOOK")
@click.argument('summary')
@click.argument('report', type=click.File('r'))
def pipeline_done(summary, report, success=True, url=None):

    msg = {
        'fallback': summary,
        'pretext': summary,
    }

    color = 'good'
    if not success:
        color = 'danger'
        msg.update({
            'title': 'Error messages',
            'author_name': 'Nextflow',
            'text': report,
        })
    msg['color'] = color

    requests.post(url, json={'attachments': [msg]})


if __name__ == '__main__':
    cli()  # pylint: disable=no-value-for-parameter
