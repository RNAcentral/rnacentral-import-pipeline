#!/usr/bin/env python

import os

import click

# from rnacentral_pipeline.databases.generic import parser as generic
# from rnacentral_pipeline.databases.ensembl import parser as ensembl

# from rnacentral_pipeline.utils.output import DatabaseOutput

from databases.rfam import infernal_results


@click.group()
def cli():
    pass


@cli.group()
def process():
    pass


@process.command('json-schema')
@click.argument('json_file', type=click.File('rb'))
def process_json_schema(json_file):
    pass
    # DatabaseOutput.populate(generic.parse, json_file)


@process.command('ensembl')
@click.argument('ensembl_file', type=click.File('rb'))
def process_ensembl(json_file):
    pass
    # DatabaseOutput.populate(ensembl.parse, json_file)


@process.command('pdb')
def process_pdb():
    pass
    # DatabaseOutput.populate(pdb.as_entries, pdb.rna_containing_pdb_ids())


@cli.group('search-export')
def search_export():
    pass


@search_export.command('ranges')
@click.argument('chunk_size', type=int)
@click.argument('output', default='-', type=click.File('wb'))
@click.option('db_url', default=os.environ['DB_URL'])
def search_export_ranges(chunk_size, output, db_url=None):
    writer = csv.Writer(output, delimiter='\t')
    writer.writerows(upi_ranges(db_url, chunk_size))


@search_export.command('as-xml')
@click.argument('raw_file', type=click.File('rb'))
@click.argument('xml_file', type=click.File('wb'))
@click.argument('count_file', default='count', type=click.File('wb'))
def search_export_xml(raw_file, xml_file, count_file=None):
    search.write(search.parse(raw_file), xml_file, count_file)


@search_export.command('release-note')
@click.argument('count_files', narg=-1, type=click.File('rb'))
def search_export_note(files):
    pass


@cli.group('genome-mapping')
def genome_mapping():
    pass


@genome_mapping.command('mappable-species')
def genome_mapping_mappable():
    pass


@genome_mapping.command('sequences-to-map')
def genome_mapping_sequences():
    pass


@cli.group('ftp-export')
def ftp_export():
    pass


@ftp_export.command('md5')
@click.argument('output', type=click.File('wb'))
def ftp_export_md5(output):
    pass


@cli.group('rfam-annotations')
def rfam_annotations():
    pass


@rfam_annotations.command('process')
@click.argument('tblout', type=click.File('rb'))
@click.argument('output', default='-', type=click.File('wb'))
def rfam_process(tblout, output):
    """
    Process a table out file and create a CSV for importing into our database.
    This will overwrite the given file.
    """
    infernal_results.as_csv(tblout, output)
